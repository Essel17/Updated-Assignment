import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import classification_report, roc_curve, auc

st.set_page_config(page_title="Churn App", layout="wide")
st.title("Group 4 Customer Churn Prediction App")

# Upload file
uploaded_file = st.file_uploader("Upload your Excel or CSV file", type=["xlsx", "csv"])

if uploaded_file is not None:
    # Load dataset
    try:
        if uploaded_file.name.endswith('.csv'):
            df = pd.read_csv(uploaded_file)
        else:
            df = pd.read_excel(uploaded_file, engine='openpyxl')
    except Exception as e:
        st.error(f"Error reading file: {e}")
        st.stop()

    st.subheader("Raw Data Preview")
    st.dataframe(df.head())

    # Clean and preprocess
    df = df.copy()
    if 'TotalCharges' in df.columns:
        df['TotalCharges'] = pd.to_numeric(df['TotalCharges'], errors='coerce')
    df.dropna(inplace=True)

    if 'customerID' in df.columns:
        df.drop(columns=['customerID'], inplace=True)

    # Identify categorical and numerical columns
    cat_cols = df.select_dtypes(include='object').columns.tolist()
    num_cols = df.select_dtypes(include=['int64', 'float64']).columns.tolist()

    # Encode categorical columns
    df_encoded = df.copy()
    label_encoders = {}
    for col in cat_cols:
        le = LabelEncoder()
        df_encoded[col] = le.fit_transform(df_encoded[col])
        label_encoders[col] = le

    # Scale numerical columns
    scaler = StandardScaler()
    df_encoded[num_cols] = scaler.fit_transform(df_encoded[num_cols])

    # Visualizations
    st.subheader("ðŸ“Š Exploratory Data Visualizations")

    if 'Churn' in df.columns:
        st.markdown("**Churn Distribution**")
        fig1, ax1 = plt.subplots()
        sns.countplot(data=df, x='Churn', ax=ax1)
        st.pyplot(fig1)

    st.markdown("**Histograms of Numerical Features**")
    for col in num_cols:
        fig, ax = plt.subplots()
        sns.histplot(df[col], kde=True, ax=ax)
        ax.set_title(f"Histogram of {col}")
        st.pyplot(fig)

    st.markdown("**Correlation Matrix**")
    fig_corr, ax_corr = plt.subplots(figsize=(10, 6))
    sns.heatmap(df_encoded[num_cols].corr(), annot=True, cmap='coolwarm', ax=ax_corr)
    st.pyplot(fig_corr)

    # Modeling
    if 'Churn' in df_encoded.columns:
        X = df_encoded.drop(columns=['Churn'])
        y = df_encoded['Churn']
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

        log_model = LogisticRegression(max_iter=1000)
        tree_model = DecisionTreeClassifier()

        log_model.fit(X_train, y_train)
        tree_model.fit(X_train, y_train)

        st.subheader("Model Evaluation")

        st.markdown("**Logistic Regression Report**")
        y_pred_log = log_model.predict(X_test)
        st.text(classification_report(y_test, y_pred_log))

        st.markdown("**Decision Tree Report**")
        y_pred_tree = tree_model.predict(X_test)
        st.text(classification_report(y_test, y_pred_tree))

        # ROC Curve
        st.markdown("**ROC Curve Comparison**")
        y_score_log = log_model.predict_proba(X_test)[:, 1]
        y_score_tree = tree_model.predict_proba(X_test)[:, 1]
        fpr_log, tpr_log, _ = roc_curve(y_test, y_score_log)
        fpr_tree, tpr_tree, _ = roc_curve(y_test, y_score_tree)
        auc_log = auc(fpr_log, tpr_log)
        auc_tree = auc(fpr_tree, tpr_tree)

        fig_roc, ax_roc = plt.subplots()
        ax_roc.plot(fpr_log, tpr_log, label=f"Logistic Regression (AUC = {auc_log:.2f})")
        ax_roc.plot(fpr_tree, tpr_tree, label=f"Decision Tree (AUC = {auc_tree:.2f})")
        ax_roc.plot([0, 1], [0, 1], 'k--')
        ax_roc.set_xlabel("False Positive Rate")
        ax_roc.set_ylabel("True Positive Rate")
        ax_roc.set_title("ROC Curve")
        ax_roc.legend()
        st.pyplot(fig_roc)

        # Feature importance
        st.subheader(" Feature Importance (Decision Tree)")
        importances = tree_model.feature_importances_
        indices = np.argsort(importances)[-10:]
        fig_imp, ax_imp = plt.subplots()
        sns.barplot(x=importances[indices], y=X.columns[indices], ax=ax_imp)
        ax_imp.set_title("Top 10 Feature Importances")
        st.pyplot(fig_imp)

        # Prediction form
        st.subheader(" Predict Customer Churn")
        input_data = {}
        for col in X.columns:
            if col in cat_cols:
                options = df[col].unique().tolist()
                input_data[col] = st.selectbox(f"{col}", options)
            else:
                min_val = float(df[col].min())
                max_val = float(df[col].max())
                mean_val = float(df[col].mean())
                input_data[col] = st.slider(f"{col}", min_val, max_val, mean_val)

        if st.button("Predict"):
            input_df = pd.DataFrame([input_data])
            for col in input_df.columns:
                if col in label_encoders:
                    input_df[col] = label_encoders[col].transform(input_df[col])
            input_df[num_cols] = scaler.transform(input_df[num_cols])
            pred = tree_model.predict(input_df)[0]
            prob = tree_model.predict_proba(input_df)[0][pred]
            st.success(f"Prediction: {'Churn' if pred == 1 else 'No Churn'} (Confidence: {prob:.2%})")
